
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  cars Car[]
  savedCars Car[] @relation("SavedCars")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  testDriveRequests TestDriveRequest[]
  messages Message[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

 
  @@id([provider, providerAccountId])
}
 
model Car{
  id String @id @default(cuid())
  name String
  brand String
  type CarType
  year Int
  mileage Int
  colors String[]
  price Float
  description String
  images String[]
  userId String
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  isSold Boolean @default(false)
  isFeatured Boolean @default(false)
  isNew Boolean @default(false)
  features String[]
  location String
  fuelType FuelType @default(PETROL)
  transmission Transmission @default(MANUAL)
  savedBy User[] @relation("SavedCars")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  specification CarSpecification?
  seller CarSeller?
  testDriveRequests TestDriveRequest[]

}

model CarSpecification{
  id String @id @default(cuid())
  engineCapacity Int?
  doors Int?
  seats Int?
  topSpeed Int?
  acceleration Float?
  horsepower Int?
  torque Int?
  length Int?
  width Int?
  height Int?
  weight Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carId String
  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([carId])
}

model CarSeller {
  id         String   @id @default(cuid())
  name       String
  image      String?
  phone      String?
  email      String?
  website    String?
  address    String?
  city       String?
  state      String?
  country    String?
  postalCode String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  carId String @unique
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model TestDriveRequest {
  id        String        @id @default(cuid())
  carId     String
  userId    String
  date      DateTime
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  car  Car  @relation(fields: [carId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([carId, userId])
}

model Message {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  content   String
  userId    String
  receiver  User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CarType {
  SEDAN
  SUV
  HATCHBACK
  COUPE
  CONVERTIBLE
  PICKUP
  VAN
  WAGON
  CROSSOVER
  SPORTS
  OTHER
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID

}

enum Transmission {
  MANUAL
  AUTOMATIC
}

